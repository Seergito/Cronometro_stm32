
Reloj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002f84  08002f84  00003f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ff4  08002ff4  00003ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ffc  08002ffc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ffc  08002ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003004  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003010  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003010  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb39  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c72  00000000  00000000  00011b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  000137e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164a5  00000000  00000000  00014df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da63  00000000  00000000  0002b296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcfd  00000000  00000000  00038cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c69f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000c6a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c9e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f6c 	.word	0x08002f6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f6c 	.word	0x08002f6c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <tm1638_SDOhigh>:
#include <math.h>
#include <stdbool.h>


static void tm1638_SDOhigh(TM1638 *tm)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	8a5b      	ldrh	r3, [r3, #18]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f001 f99a 	bl	8001820 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
//   HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <tm1638_SDOlow>:
static void tm1638_SDOlow(TM1638 *tm)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6858      	ldr	r0, [r3, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	8a5b      	ldrh	r3, [r3, #18]
 8000504:	2200      	movs	r2, #0
 8000506:	4619      	mov	r1, r3
 8000508:	f001 f98a 	bl	8001820 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <tm1638_STBhigh>:
static void tm1638_STBhigh(TM1638 *tm)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6898      	ldr	r0, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	8a9b      	ldrh	r3, [r3, #20]
 8000524:	2201      	movs	r2, #1
 8000526:	4619      	mov	r1, r3
 8000528:	f001 f97a 	bl	8001820 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
    //    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <tm1638_STBlow>:
static void tm1638_STBlow(TM1638 *tm)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	8a9b      	ldrh	r3, [r3, #20]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f001 f96a 	bl	8001820 <HAL_GPIO_WritePin>
    //     HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
    //     HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <tm1638_CLKhigh>:
static void tm1638_CLKhigh(TM1638 *tm)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	8a1b      	ldrh	r3, [r3, #16]
 8000564:	2201      	movs	r2, #1
 8000566:	4619      	mov	r1, r3
 8000568:	f001 f95a 	bl	8001820 <HAL_GPIO_WritePin>
    //        HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
    //     HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <tm1638_CLKlow>:
static void tm1638_CLKlow(TM1638 *tm)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	8a1b      	ldrh	r3, [r3, #16]
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	f001 f94a 	bl	8001820 <HAL_GPIO_WritePin>
    //       HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
    //      HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <tm1638_StartPacket>:
*/


// send signal to start transmission of data
static void tm1638_StartPacket(TM1638 *tm)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    tm1638_CLKhigh(tm);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ffd9 	bl	8000554 <tm1638_CLKhigh>
    tm1638_STBhigh(tm);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffb6 	bl	8000514 <tm1638_STBhigh>
    tm1638_STBlow(tm);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffc3 	bl	8000534 <tm1638_STBlow>
    tm1638_CLKlow(tm);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff ffe0 	bl	8000574 <tm1638_CLKlow>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <tm1638_EndPacket>:
// send signal to end transmission of data
static void tm1638_EndPacket(TM1638 *tm)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    tm1638_CLKlow(tm);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffd5 	bl	8000574 <tm1638_CLKlow>
    tm1638_STBlow(tm);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffb2 	bl	8000534 <tm1638_STBlow>
    tm1638_CLKhigh(tm);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffbf 	bl	8000554 <tm1638_CLKhigh>
    tm1638_STBhigh(tm);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff9c 	bl	8000514 <tm1638_STBhigh>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <tm1638_Confirm>:
// send signal necessary to confirm transmission of data when using fix address mode
static void tm1638_Confirm(TM1638 *tm)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    tm1638_STBlow(tm);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffa1 	bl	8000534 <tm1638_STBlow>
    tm1638_SDOlow(tm);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff7e 	bl	80004f4 <tm1638_SDOlow>
    tm1638_STBhigh(tm);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff8b 	bl	8000514 <tm1638_STBhigh>
    tm1638_SDOhigh(tm);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff68 	bl	80004d4 <tm1638_SDOhigh>
    tm1638_STBlow(tm);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff95 	bl	8000534 <tm1638_STBlow>
    tm1638_SDOlow(tm);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff72 	bl	80004f4 <tm1638_SDOlow>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <tm1638_SendData>:

static void tm1638_SendData(TM1638 *tm, uint8_t Data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
    uint8_t ByteData[8] = {0};
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]

    // convert data to bit array
    for (uint8_t j = 0; j < 8; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	75fb      	strb	r3, [r7, #23]
 8000630:	e012      	b.n	8000658 <tm1638_SendData+0x40>
    {
        ByteData[j] = (Data & (0x01 << j)) && 1;
 8000632:	78fa      	ldrb	r2, [r7, #3]
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	fa42 f303 	asr.w	r3, r2, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf14      	ite	ne
 8000642:	2301      	movne	r3, #1
 8000644:	2300      	moveq	r3, #0
 8000646:	b2da      	uxtb	r2, r3
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	3318      	adds	r3, #24
 800064c:	443b      	add	r3, r7
 800064e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t j = 0; j < 8; j++)
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	3301      	adds	r3, #1
 8000656:	75fb      	strb	r3, [r7, #23]
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d9e9      	bls.n	8000632 <tm1638_SendData+0x1a>
    }
    // send bit array
    for (int8_t j = 0; j < 8; j++)
 800065e:	2300      	movs	r3, #0
 8000660:	75bb      	strb	r3, [r7, #22]
 8000662:	e01a      	b.n	800069a <tm1638_SendData+0x82>
    {
        tm1638_CLKlow(tm);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff85 	bl	8000574 <tm1638_CLKlow>
        if (ByteData[j] == GPIO_PIN_SET)
 800066a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800066e:	3318      	adds	r3, #24
 8000670:	443b      	add	r3, r7
 8000672:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d103      	bne.n	8000682 <tm1638_SendData+0x6a>
        {
            tm1638_SDOhigh(tm);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ff2a 	bl	80004d4 <tm1638_SDOhigh>
 8000680:	e002      	b.n	8000688 <tm1638_SendData+0x70>
        }
        else
        {
            tm1638_SDOlow(tm);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff36 	bl	80004f4 <tm1638_SDOlow>
        }
        tm1638_CLKhigh(tm);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff63 	bl	8000554 <tm1638_CLKhigh>
    for (int8_t j = 0; j < 8; j++)
 800068e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	75bb      	strb	r3, [r7, #22]
 800069a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	dde0      	ble.n	8000664 <tm1638_SendData+0x4c>
    }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <tm1638_DisplayClear>:


void tm1638_DisplayClear(TM1638 *tm)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
   // tm1638_InitPins(tm);
    tm1638_StartPacket(tm);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff6d 	bl	8000594 <tm1638_StartPacket>

    tm1638_SendData(tm, DATA_SET);     // 0x40 command Sets up sequential address mode.
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffab 	bl	8000618 <tm1638_SendData>
    tm1638_Confirm(tm);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff8e 	bl	80005e4 <tm1638_Confirm>

    tm1638_SendData(tm, 0xc0);   // Address 0
 80006c8:	21c0      	movs	r1, #192	@ 0xc0
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffa4 	bl	8000618 <tm1638_SendData>
    for (uint8_t i = 0; i < 16; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e006      	b.n	80006e4 <tm1638_DisplayClear+0x38>
    {
        tm1638_SendData(tm, 0x00);
 80006d6:	2100      	movs	r1, #0
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff9d 	bl	8000618 <tm1638_SendData>
    for (uint8_t i = 0; i < 16; i++)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d9f5      	bls.n	80006d6 <tm1638_DisplayClear+0x2a>
    }
    tm1638_Confirm(tm);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff7a 	bl	80005e4 <tm1638_Confirm>


    tm1638_SendData(tm, DISPLAY_OFF); // 0x80  1000 <0><000>
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff90 	bl	8000618 <tm1638_SendData>

    tm1638_EndPacket(tm);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff5f 	bl	80005bc <tm1638_EndPacket>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <tm1638_TurnOn>:
/**
 * @param brightness must be an integer between 0 and 7
 */
void tm1638_TurnOn(TM1638 *tm, uint8_t brightness)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
    if (brightness > 0 && brightness < 8)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00c      	beq.n	8000734 <tm1638_TurnOn+0x2c>
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d809      	bhi.n	8000734 <tm1638_TurnOn+0x2c>
    {
        brightness = brightness | DISPLAY_ON; // 0x88 1000 <1><000>
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8000726:	70fb      	strb	r3, [r7, #3]
        tm1638_SendData(tm, brightness);
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	4619      	mov	r1, r3
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff73 	bl	8000618 <tm1638_SendData>
 8000732:	e004      	b.n	800073e <tm1638_TurnOn+0x36>
    }
    else
    {
        tm1638_DisplayTxt(tm, "Error 1");
 8000734:	4903      	ldr	r1, [pc, #12]	@ (8000744 <tm1638_TurnOn+0x3c>)
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f830 	bl	800079c <tm1638_DisplayTxt>
        return;
 800073c:	bf00      	nop
    }
}
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08002f84 	.word	0x08002f84

08000748 <tm1638_DisplayChar>:

void tm1638_DisplayChar(TM1638 *tm, int position, char c, bool dot)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	460b      	mov	r3, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
	        int hex = chr_to_hex(c);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f8e3 	bl	800092c <chr_to_hex>
 8000766:	4603      	mov	r3, r0
 8000768:	617b      	str	r3, [r7, #20]
	        if (hex >= 0)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0b      	blt.n	8000788 <tm1638_DisplayChar+0x40>
	        {
	            if (dot)
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <tm1638_DisplayChar+0x34>
	            {
	            	hex += 0x80; // activa punto decimal
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3380      	adds	r3, #128	@ 0x80
 800077a:	617b      	str	r3, [r7, #20]
	            }

	            tm1638_Seg(tm, position, hex);
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f000 f883 	bl	800088c <tm1638_Seg>
 8000786:	e004      	b.n	8000792 <tm1638_DisplayChar+0x4a>

	        }
	        else
	        {
	            tm1638_DisplayTxt(tm, "Error 7");
 8000788:	4903      	ldr	r1, [pc, #12]	@ (8000798 <tm1638_DisplayChar+0x50>)
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f000 f806 	bl	800079c <tm1638_DisplayTxt>
	            return;
 8000790:	bf00      	nop
	        }

}
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08002f8c 	.word	0x08002f8c

0800079c <tm1638_DisplayTxt>:

/**
 * @param c must have a maximum length of 8(+ 8 maximum dots) and must contain only valid characters
 */
void tm1638_DisplayTxt(TM1638 *tm, char *c)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    char padded[8] = "        ";
 80007a6:	4a36      	ldr	r2, [pc, #216]	@ (8000880 <tm1638_DisplayTxt+0xe4>)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dot[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80007b4:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <tm1638_DisplayTxt+0xe8>)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007be:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t p = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	77fb      	strb	r3, [r7, #31]
    for (int8_t i = strlen(c) - 1; i >= 0; i--)
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f7ff fd04 	bl	80001d4 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	77bb      	strb	r3, [r7, #30]
 80007d6:	e027      	b.n	8000828 <tm1638_DisplayTxt+0x8c>
    {
        if (p == 8)
 80007d8:	7ffb      	ldrb	r3, [r7, #31]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d104      	bne.n	80007e8 <tm1638_DisplayTxt+0x4c>
        {
            tm1638_DisplayTxt(tm, "Error 2");
 80007de:	492a      	ldr	r1, [pc, #168]	@ (8000888 <tm1638_DisplayTxt+0xec>)
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ffdb 	bl	800079c <tm1638_DisplayTxt>
 80007e6:	e048      	b.n	800087a <tm1638_DisplayTxt+0xde>
            return;
        }

        if (c[i] == '.')
 80007e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80007f4:	d106      	bne.n	8000804 <tm1638_DisplayTxt+0x68>
            dot[p] = 1;
 80007f6:	7ffb      	ldrb	r3, [r7, #31]
 80007f8:	3320      	adds	r3, #32
 80007fa:	443b      	add	r3, r7
 80007fc:	2201      	movs	r2, #1
 80007fe:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000802:	e00b      	b.n	800081c <tm1638_DisplayTxt+0x80>
        else
            padded[p++] = c[i];
 8000804:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	441a      	add	r2, r3
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	1c59      	adds	r1, r3, #1
 8000810:	77f9      	strb	r1, [r7, #31]
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	3320      	adds	r3, #32
 8000816:	443b      	add	r3, r7
 8000818:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int8_t i = strlen(c) - 1; i >= 0; i--)
 800081c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3b01      	subs	r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	77bb      	strb	r3, [r7, #30]
 8000828:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dad3      	bge.n	80007d8 <tm1638_DisplayTxt+0x3c>
    }


    for (int8_t i = 7; i >= 0; i--)
 8000830:	2307      	movs	r3, #7
 8000832:	777b      	strb	r3, [r7, #29]
 8000834:	e01d      	b.n	8000872 <tm1638_DisplayTxt+0xd6>
    {
    	tm1638_DisplayChar(tm, 7 - i + 1,padded[i],dot[i]);
 8000836:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800083a:	f1c3 0108 	rsb	r1, r3, #8
 800083e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000842:	3320      	adds	r3, #32
 8000844:	443b      	add	r3, r7
 8000846:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800084a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800084e:	3320      	adds	r3, #32
 8000850:	443b      	add	r3, r7
 8000852:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	bf14      	ite	ne
 800085a:	2301      	movne	r3, #1
 800085c:	2300      	moveq	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff71 	bl	8000748 <tm1638_DisplayChar>
    for (int8_t i = 7; i >= 0; i--)
 8000866:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	3b01      	subs	r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	777b      	strb	r3, [r7, #29]
 8000872:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000876:	2b00      	cmp	r3, #0
 8000878:	dadd      	bge.n	8000836 <tm1638_DisplayTxt+0x9a>
    }

  //  tm1638_TurnOn(tm, 1);
}
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08002f9c 	.word	0x08002f9c
 8000884:	08002fa4 	.word	0x08002fa4
 8000888:	08002f94 	.word	0x08002f94

0800088c <tm1638_Seg>:
    tm1638_EndPacket(tm);
}


void tm1638_Seg(TM1638 *tm, int position, int data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
    if (!(position >= 1 && position <= 8))
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd02      	ble.n	80008a4 <tm1638_Seg+0x18>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	dd04      	ble.n	80008ae <tm1638_Seg+0x22>
    {
        tm1638_DisplayTxt(tm, "Error 5");
 80008a4:	491f      	ldr	r1, [pc, #124]	@ (8000924 <tm1638_Seg+0x98>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ff78 	bl	800079c <tm1638_DisplayTxt>
        return;
 80008ac:	e036      	b.n	800091c <tm1638_Seg+0x90>
    }
    if (!(data >= 0x00 && data <= 0xff))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db02      	blt.n	80008ba <tm1638_Seg+0x2e>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2bff      	cmp	r3, #255	@ 0xff
 80008b8:	dd04      	ble.n	80008c4 <tm1638_Seg+0x38>
    {
        tm1638_DisplayTxt(tm, "Error 6");
 80008ba:	491b      	ldr	r1, [pc, #108]	@ (8000928 <tm1638_Seg+0x9c>)
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff ff6d 	bl	800079c <tm1638_DisplayTxt>
        return;
 80008c2:	e02b      	b.n	800091c <tm1638_Seg+0x90>
    }
   // tm1638_InitPins(tm);
    tm1638_StartPacket(tm);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe65 	bl	8000594 <tm1638_StartPacket>

    tm1638_SendData(tm, DATA_SET); // 0x40 command Sets up sequential address mode.
 80008ca:	2140      	movs	r1, #64	@ 0x40
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff fea3 	bl	8000618 <tm1638_SendData>
    tm1638_Confirm(tm);
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff fe86 	bl	80005e4 <tm1638_Confirm>

   // tm1638_SendData(tm, 0xc0 + 0x01 * 2 * (position - 1)); // Address par DISPLAY
    tm1638_SendData(tm, 0xc0 +  2 * (position - 1)); // Address par DISPLAY 2 (n-1)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	335f      	adds	r3, #95	@ 0x5f
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4619      	mov	r1, r3
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff fe97 	bl	8000618 <tm1638_SendData>

    tm1638_CLKhigh(tm);
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff fe32 	bl	8000554 <tm1638_CLKhigh>
    tm1638_SDOhigh(tm);
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff fdef 	bl	80004d4 <tm1638_SDOhigh>
    tm1638_SDOlow(tm);
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff fdfc 	bl	80004f4 <tm1638_SDOlow>
    tm1638_SendData(tm, data);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff fe88 	bl	8000618 <tm1638_SendData>
    tm1638_Confirm(tm);
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff fe6b 	bl	80005e4 <tm1638_Confirm>

    tm1638_TurnOn(tm, 7);
 800090e:	2107      	movs	r1, #7
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff fef9 	bl	8000708 <tm1638_TurnOn>

    tm1638_EndPacket(tm);
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f7ff fe50 	bl	80005bc <tm1638_EndPacket>
}
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	08002fbc 	.word	0x08002fbc
 8000928:	08002fc4 	.word	0x08002fc4

0800092c <chr_to_hex>:
        }
    }
}

int8_t chr_to_hex(char c)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    switch (c)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	3b20      	subs	r3, #32
 800093a:	2b59      	cmp	r3, #89	@ 0x59
 800093c:	f200 8104 	bhi.w	8000b48 <chr_to_hex+0x21c>
 8000940:	a201      	add	r2, pc, #4	@ (adr r2, 8000948 <chr_to_hex+0x1c>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000ad9 	.word	0x08000ad9
 800094c:	08000b49 	.word	0x08000b49
 8000950:	08000b49 	.word	0x08000b49
 8000954:	08000b49 	.word	0x08000b49
 8000958:	08000b49 	.word	0x08000b49
 800095c:	08000b49 	.word	0x08000b49
 8000960:	08000b49 	.word	0x08000b49
 8000964:	08000b49 	.word	0x08000b49
 8000968:	08000b49 	.word	0x08000b49
 800096c:	08000b49 	.word	0x08000b49
 8000970:	08000b49 	.word	0x08000b49
 8000974:	08000b49 	.word	0x08000b49
 8000978:	08000b49 	.word	0x08000b49
 800097c:	08000b15 	.word	0x08000b15
 8000980:	08000b49 	.word	0x08000b49
 8000984:	08000b49 	.word	0x08000b49
 8000988:	08000ab1 	.word	0x08000ab1
 800098c:	08000ab5 	.word	0x08000ab5
 8000990:	08000ab9 	.word	0x08000ab9
 8000994:	08000abd 	.word	0x08000abd
 8000998:	08000ac1 	.word	0x08000ac1
 800099c:	08000ac5 	.word	0x08000ac5
 80009a0:	08000ac9 	.word	0x08000ac9
 80009a4:	08000acd 	.word	0x08000acd
 80009a8:	08000ad1 	.word	0x08000ad1
 80009ac:	08000ad5 	.word	0x08000ad5
 80009b0:	08000b49 	.word	0x08000b49
 80009b4:	08000b49 	.word	0x08000b49
 80009b8:	08000b49 	.word	0x08000b49
 80009bc:	08000b49 	.word	0x08000b49
 80009c0:	08000b49 	.word	0x08000b49
 80009c4:	08000b49 	.word	0x08000b49
 80009c8:	08000b49 	.word	0x08000b49
 80009cc:	08000add 	.word	0x08000add
 80009d0:	08000ae1 	.word	0x08000ae1
 80009d4:	08000ae5 	.word	0x08000ae5
 80009d8:	08000b49 	.word	0x08000b49
 80009dc:	08000ae9 	.word	0x08000ae9
 80009e0:	08000aed 	.word	0x08000aed
 80009e4:	08000b49 	.word	0x08000b49
 80009e8:	08000af1 	.word	0x08000af1
 80009ec:	08000af5 	.word	0x08000af5
 80009f0:	08000af9 	.word	0x08000af9
 80009f4:	08000b49 	.word	0x08000b49
 80009f8:	08000afd 	.word	0x08000afd
 80009fc:	08000b49 	.word	0x08000b49
 8000a00:	08000b49 	.word	0x08000b49
 8000a04:	08000b01 	.word	0x08000b01
 8000a08:	08000b05 	.word	0x08000b05
 8000a0c:	08000b49 	.word	0x08000b49
 8000a10:	08000b49 	.word	0x08000b49
 8000a14:	08000b09 	.word	0x08000b09
 8000a18:	08000b49 	.word	0x08000b49
 8000a1c:	08000b0d 	.word	0x08000b0d
 8000a20:	08000b49 	.word	0x08000b49
 8000a24:	08000b49 	.word	0x08000b49
 8000a28:	08000b49 	.word	0x08000b49
 8000a2c:	08000b49 	.word	0x08000b49
 8000a30:	08000b49 	.word	0x08000b49
 8000a34:	08000b49 	.word	0x08000b49
 8000a38:	08000b49 	.word	0x08000b49
 8000a3c:	08000b49 	.word	0x08000b49
 8000a40:	08000b49 	.word	0x08000b49
 8000a44:	08000b11 	.word	0x08000b11
 8000a48:	08000b49 	.word	0x08000b49
 8000a4c:	08000b19 	.word	0x08000b19
 8000a50:	08000b1d 	.word	0x08000b1d
 8000a54:	08000b21 	.word	0x08000b21
 8000a58:	08000b25 	.word	0x08000b25
 8000a5c:	08000b49 	.word	0x08000b49
 8000a60:	08000b49 	.word	0x08000b49
 8000a64:	08000b49 	.word	0x08000b49
 8000a68:	08000b29 	.word	0x08000b29
 8000a6c:	08000b2d 	.word	0x08000b2d
 8000a70:	08000b49 	.word	0x08000b49
 8000a74:	08000b49 	.word	0x08000b49
 8000a78:	08000b49 	.word	0x08000b49
 8000a7c:	08000b49 	.word	0x08000b49
 8000a80:	08000b31 	.word	0x08000b31
 8000a84:	08000b35 	.word	0x08000b35
 8000a88:	08000b49 	.word	0x08000b49
 8000a8c:	08000b49 	.word	0x08000b49
 8000a90:	08000b39 	.word	0x08000b39
 8000a94:	08000b49 	.word	0x08000b49
 8000a98:	08000b3d 	.word	0x08000b3d
 8000a9c:	08000b41 	.word	0x08000b41
 8000aa0:	08000b49 	.word	0x08000b49
 8000aa4:	08000b49 	.word	0x08000b49
 8000aa8:	08000b49 	.word	0x08000b49
 8000aac:	08000b45 	.word	0x08000b45
    {
    case '0':
        return 0x3f;
 8000ab0:	233f      	movs	r3, #63	@ 0x3f
 8000ab2:	e04b      	b.n	8000b4c <chr_to_hex+0x220>
    case '1':
        return 0x06;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	e049      	b.n	8000b4c <chr_to_hex+0x220>
    case '2':
        return 0x5b;
 8000ab8:	235b      	movs	r3, #91	@ 0x5b
 8000aba:	e047      	b.n	8000b4c <chr_to_hex+0x220>
    case '3':
        return 0x4f;
 8000abc:	234f      	movs	r3, #79	@ 0x4f
 8000abe:	e045      	b.n	8000b4c <chr_to_hex+0x220>
    case '4':
        return 0x66;
 8000ac0:	2366      	movs	r3, #102	@ 0x66
 8000ac2:	e043      	b.n	8000b4c <chr_to_hex+0x220>
    case '5':
        return 0x6d;
 8000ac4:	236d      	movs	r3, #109	@ 0x6d
 8000ac6:	e041      	b.n	8000b4c <chr_to_hex+0x220>
    case '6':
        return 0x7d;
 8000ac8:	237d      	movs	r3, #125	@ 0x7d
 8000aca:	e03f      	b.n	8000b4c <chr_to_hex+0x220>
    case '7':
        return 0x07;
 8000acc:	2307      	movs	r3, #7
 8000ace:	e03d      	b.n	8000b4c <chr_to_hex+0x220>
    case '8':
        return 0x7f;
 8000ad0:	237f      	movs	r3, #127	@ 0x7f
 8000ad2:	e03b      	b.n	8000b4c <chr_to_hex+0x220>
    case '9':
        return 0x6f;
 8000ad4:	236f      	movs	r3, #111	@ 0x6f
 8000ad6:	e039      	b.n	8000b4c <chr_to_hex+0x220>
    case ' ':
        return 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e037      	b.n	8000b4c <chr_to_hex+0x220>
    case 'A':
        return 0x77;
 8000adc:	2377      	movs	r3, #119	@ 0x77
 8000ade:	e035      	b.n	8000b4c <chr_to_hex+0x220>
    case 'B':
        return 0x7f;
 8000ae0:	237f      	movs	r3, #127	@ 0x7f
 8000ae2:	e033      	b.n	8000b4c <chr_to_hex+0x220>
    case 'C':
        return 0x39;
 8000ae4:	2339      	movs	r3, #57	@ 0x39
 8000ae6:	e031      	b.n	8000b4c <chr_to_hex+0x220>
    case 'E':
        return 0x79;
 8000ae8:	2379      	movs	r3, #121	@ 0x79
 8000aea:	e02f      	b.n	8000b4c <chr_to_hex+0x220>
    case 'F':
        return 0x71;
 8000aec:	2371      	movs	r3, #113	@ 0x71
 8000aee:	e02d      	b.n	8000b4c <chr_to_hex+0x220>
    case 'H':
        return 0x76;
 8000af0:	2376      	movs	r3, #118	@ 0x76
 8000af2:	e02b      	b.n	8000b4c <chr_to_hex+0x220>
    case 'I':
        return 0x06;
 8000af4:	2306      	movs	r3, #6
 8000af6:	e029      	b.n	8000b4c <chr_to_hex+0x220>
    case 'J':
        return 0x0e;
 8000af8:	230e      	movs	r3, #14
 8000afa:	e027      	b.n	8000b4c <chr_to_hex+0x220>
    case 'L':
        return 0x38;
 8000afc:	2338      	movs	r3, #56	@ 0x38
 8000afe:	e025      	b.n	8000b4c <chr_to_hex+0x220>
    case 'O':
        return 0x3f;
 8000b00:	233f      	movs	r3, #63	@ 0x3f
 8000b02:	e023      	b.n	8000b4c <chr_to_hex+0x220>
    case 'P':
        return 0x73;
 8000b04:	2373      	movs	r3, #115	@ 0x73
 8000b06:	e021      	b.n	8000b4c <chr_to_hex+0x220>
    case 'S':
        return 0x6d;
 8000b08:	236d      	movs	r3, #109	@ 0x6d
 8000b0a:	e01f      	b.n	8000b4c <chr_to_hex+0x220>
    case 'U':
        return 0x3e;
 8000b0c:	233e      	movs	r3, #62	@ 0x3e
 8000b0e:	e01d      	b.n	8000b4c <chr_to_hex+0x220>
    case '_':
        return 0x08;
 8000b10:	2308      	movs	r3, #8
 8000b12:	e01b      	b.n	8000b4c <chr_to_hex+0x220>
    case '-':
        return 0x40;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	e019      	b.n	8000b4c <chr_to_hex+0x220>
    case 'a':
        return 0x5f;
 8000b18:	235f      	movs	r3, #95	@ 0x5f
 8000b1a:	e017      	b.n	8000b4c <chr_to_hex+0x220>
    case 'b':
        return 0x7c;
 8000b1c:	237c      	movs	r3, #124	@ 0x7c
 8000b1e:	e015      	b.n	8000b4c <chr_to_hex+0x220>
    case 'c':
        return 0x58;
 8000b20:	2358      	movs	r3, #88	@ 0x58
 8000b22:	e013      	b.n	8000b4c <chr_to_hex+0x220>
    case 'd':
        return 0x5e;
 8000b24:	235e      	movs	r3, #94	@ 0x5e
 8000b26:	e011      	b.n	8000b4c <chr_to_hex+0x220>
    case 'h':
        return 0x74;
 8000b28:	2374      	movs	r3, #116	@ 0x74
 8000b2a:	e00f      	b.n	8000b4c <chr_to_hex+0x220>
    case 'i':
        return 0x04;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e00d      	b.n	8000b4c <chr_to_hex+0x220>
    case 'n':
        return 0x54;
 8000b30:	2354      	movs	r3, #84	@ 0x54
 8000b32:	e00b      	b.n	8000b4c <chr_to_hex+0x220>
    case 'o':
        return 0x5c;
 8000b34:	235c      	movs	r3, #92	@ 0x5c
 8000b36:	e009      	b.n	8000b4c <chr_to_hex+0x220>
    case 'r':
        return 0x50;
 8000b38:	2350      	movs	r3, #80	@ 0x50
 8000b3a:	e007      	b.n	8000b4c <chr_to_hex+0x220>
    case 't':
        return 0x78;
 8000b3c:	2378      	movs	r3, #120	@ 0x78
 8000b3e:	e005      	b.n	8000b4c <chr_to_hex+0x220>
    case 'u':
        return 0x1c;
 8000b40:	231c      	movs	r3, #28
 8000b42:	e003      	b.n	8000b4c <chr_to_hex+0x220>
    case 'y':
        return 0x6e;
 8000b44:	236e      	movs	r3, #110	@ 0x6e
 8000b46:	e001      	b.n	8000b4c <chr_to_hex+0x220>

    }
    return -0x01;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <ConvertirCronometroACadena.0>:
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	// Función para convertir los valores del cronómetro en un array de caracteres
	void ConvertirCronometroACadena(char* buffer, unsigned char* cronometro) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	f8c7 c004 	str.w	ip, [r7, #4]
	    // Asignamos cada dígito al array de caracteres, sumando '0' para convertir el valor numérico a su representación en ASCII
	    buffer[0] = cronometro[3] + '0'; // Decenas de segundos
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3330      	adds	r3, #48	@ 0x30
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	701a      	strb	r2, [r3, #0]
	    buffer[1] = cronometro[2] + '0'; // Unidades de segundos
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3302      	adds	r3, #2
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	3230      	adds	r2, #48	@ 0x30
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	701a      	strb	r2, [r3, #0]
	    buffer[2] = cronometro[1] + '0'; // Décimas de segundo
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	3230      	adds	r2, #48	@ 0x30
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	701a      	strb	r2, [r3, #0]
	    buffer[3] = (cronometro[0] / 10) + '0'; // Decenas de centésimas
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <ConvertirCronometroACadena.0+0x8c>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	3230      	adds	r2, #48	@ 0x30
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	701a      	strb	r2, [r3, #0]
	    buffer[4] = (cronometro[0] % 10) + '0'; // Unidades de centésimas
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <ConvertirCronometroACadena.0+0x8c>)
 8000bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb6:	08d9      	lsrs	r1, r3, #3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	3230      	adds	r2, #48	@ 0x30
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	701a      	strb	r2, [r3, #0]
	    buffer[5] = '\0'; // Fin de cadena
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3305      	adds	r3, #5
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	cccccccd 	.word	0xcccccccd

08000be8 <main>:
int main(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	617b      	str	r3, [r7, #20]
	HAL_Init();
 8000bf4:	f000 fb0c 	bl	8001210 <HAL_Init>
	SystemClock_Config();
 8000bf8:	f000 f878 	bl	8000cec <SystemClock_Config>
	MX_GPIO_Init();
 8000bfc:	f000 f94e 	bl	8000e9c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c00:	f000 f922 	bl	8000e48 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000c04:	f000 f8d2 	bl	8000dac <MX_TIM3_Init>
	TM.clk_port = CLK_GPIO_Port;   // Asigna el puerto del reloj
 8000c08:	4b33      	ldr	r3, [pc, #204]	@ (8000cd8 <main+0xf0>)
 8000c0a:	4a34      	ldr	r2, [pc, #208]	@ (8000cdc <main+0xf4>)
 8000c0c:	601a      	str	r2, [r3, #0]
	TM.clk_pin = CLK_Pin;          // Asigna el pin del reloj
 8000c0e:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <main+0xf0>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	821a      	strh	r2, [r3, #16]
	TM.stb_port = STB_GPIO_Port;   // Asigna el puerto del strobe
 8000c14:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <main+0xf0>)
 8000c16:	4a32      	ldr	r2, [pc, #200]	@ (8000ce0 <main+0xf8>)
 8000c18:	609a      	str	r2, [r3, #8]
	TM.stb_pin = STB_Pin;          // Asigna el pin del strobe
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <main+0xf0>)
 8000c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c20:	829a      	strh	r2, [r3, #20]
	TM.dio_port = DIO_GPIO_Port;   // Asigna el puerto de datos
 8000c22:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <main+0xf0>)
 8000c24:	4a2d      	ldr	r2, [pc, #180]	@ (8000cdc <main+0xf4>)
 8000c26:	605a      	str	r2, [r3, #4]
	TM.dio_pin = DIO_Pin;          // Asigna el pin de datos
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <main+0xf0>)
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	825a      	strh	r2, [r3, #18]
	tm1638_TurnOn(&TM, 7);         // Enciende el display con brillo máximo (7)
 8000c2e:	2107      	movs	r1, #7
 8000c30:	4829      	ldr	r0, [pc, #164]	@ (8000cd8 <main+0xf0>)
 8000c32:	f7ff fd69 	bl	8000708 <tm1638_TurnOn>
	tm1638_DisplayClear(&TM);       // Limpia el contenido del display
 8000c36:	4828      	ldr	r0, [pc, #160]	@ (8000cd8 <main+0xf0>)
 8000c38:	f7ff fd38 	bl	80006ac <tm1638_DisplayClear>
	unsigned char cronometro[5]={0,0,0,0,0};
 8000c3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ce4 <main+0xfc>)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c44:	6018      	str	r0, [r3, #0]
 8000c46:	3304      	adds	r3, #4
 8000c48:	7019      	strb	r1, [r3, #0]
	timer = HAL_GetTick();
 8000c4a:	f000 fb47 	bl	80012dc <HAL_GetTick>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <main+0x100>)
 8000c52:	6013      	str	r3, [r2, #0]
	// Bucle principal del programa
	while (1) {

	    /* La función HAL_GetTick() es buena para evitar bloqueos */
	    if ((HAL_GetTick() - timer) > 10) {    // Cada 10 ms = 1 centésima de segundo
 8000c54:	f000 fb42 	bl	80012dc <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <main+0x100>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b0a      	cmp	r3, #10
 8000c62:	d928      	bls.n	8000cb6 <main+0xce>
	        cronometro[0]++;                   // Incrementa centésimas
 8000c64:	783b      	ldrb	r3, [r7, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	703b      	strb	r3, [r7, #0]
	        if (cronometro[0] > 99) {          // Manejo del desbordamiento de las centésimas
 8000c6c:	783b      	ldrb	r3, [r7, #0]
 8000c6e:	2b63      	cmp	r3, #99	@ 0x63
 8000c70:	d905      	bls.n	8000c7e <main+0x96>
	            cronometro[0] = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	703b      	strb	r3, [r7, #0]
	            cronometro[1]++;               // Incrementa décimas
 8000c76:	787b      	ldrb	r3, [r7, #1]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	707b      	strb	r3, [r7, #1]
	        }
	        if (cronometro[1] > 9) {           // Manejo del desbordamiento de las décimas
 8000c7e:	787b      	ldrb	r3, [r7, #1]
 8000c80:	2b09      	cmp	r3, #9
 8000c82:	d905      	bls.n	8000c90 <main+0xa8>
	            cronometro[1] = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	707b      	strb	r3, [r7, #1]
	            cronometro[2]++;               // Incrementa segundos
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	70bb      	strb	r3, [r7, #2]
	        }
	        if (cronometro[2] > 9) {           // Manejo del desbordamiento de los segundos
 8000c90:	78bb      	ldrb	r3, [r7, #2]
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	d905      	bls.n	8000ca2 <main+0xba>
	            cronometro[2] = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	70bb      	strb	r3, [r7, #2]
	            cronometro[3]++;               // Incrementa decenas de segundos
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	70fb      	strb	r3, [r7, #3]
	        }
	        if (cronometro[3] > 9) {           // Manejo del desbordamiento de decenas de segundos
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	d901      	bls.n	8000cac <main+0xc4>
	            cronometro[3] = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	70fb      	strb	r3, [r7, #3]
	        }
	        timer = HAL_GetTick();             // Reinicia el temporizador
 8000cac:	f000 fb16 	bl	80012dc <HAL_GetTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <main+0x100>)
 8000cb4:	6013      	str	r3, [r2, #0]
	    }
		//sprintf(buffer, "%d%d%d%02d", cronometro[3],cronometro[2],cronometro[1],cronometro[0]);   // Formatea la posición
		ConvertirCronometroACadena(buffer,cronometro);
 8000cb6:	463a      	mov	r2, r7
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	f107 0114 	add.w	r1, r7, #20
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff47 	bl	8000b58 <ConvertirCronometroACadena.0>
		tm1638_DisplayTxt(&TM, buffer);    // Muestra la posición actual
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4801      	ldr	r0, [pc, #4]	@ (8000cd8 <main+0xf0>)
 8000cd2:	f7ff fd63 	bl	800079c <tm1638_DisplayTxt>
	    if ((HAL_GetTick() - timer) > 10) {    // Cada 10 ms = 1 centésima de segundo
 8000cd6:	e7bd      	b.n	8000c54 <main+0x6c>
 8000cd8:	200000b8 	.word	0x200000b8
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	08002fd4 	.word	0x08002fd4
 8000ce8:	200000d4 	.word	0x200000d4

08000cec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	@ 0x50
 8000cf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	@ 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f90a 	bl	8002f14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a22      	ldr	r2, [pc, #136]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <SystemClock_Config+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d38:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <SystemClock_Config+0xbc>)
 8000d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <SystemClock_Config+0xbc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	2310      	movs	r3, #16
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fd9b 	bl	800189c <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x84>
		Error_Handler();
 8000d6c:	f000 f934 	bl	8000fd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fffd 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xb0>
		Error_Handler();
 8000d98:	f000 f91e 	bl	8000fd8 <Error_Handler>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	@ 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <MX_TIM3_Init+0x98>)
 8000dcc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000df0:	f001 f9ec 	bl	80021cc <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x52>
		Error_Handler();
 8000dfa:	f000 f8ed 	bl	8000fd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e02:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000e0c:	f001 fb1d 	bl	800244a <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000e16:	f000 f8df 	bl	8000fd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000e28:	f001 fd2e 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000e32:	f000 f8d1 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000028 	.word	0x20000028
 8000e44:	40000400 	.word	0x40000400

08000e48 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f001 fd84 	bl	800298c <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000e8a:	f000 f8a5 	bl	8000fd8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000070 	.word	0x20000070
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b44      	ldr	r3, [pc, #272]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a43      	ldr	r2, [pc, #268]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b41      	ldr	r3, [pc, #260]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <MX_GPIO_Init+0x12c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | STB_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000f28:	4828      	ldr	r0, [pc, #160]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000f2a:	f000 fc79 	bl	8001820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CLK_Pin | DIO_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2130      	movs	r1, #48	@ 0x30
 8000f32:	4827      	ldr	r0, [pc, #156]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000f34:	f000 fc74 	bl	8001820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4821      	ldr	r0, [pc, #132]	@ (8000fd4 <MX_GPIO_Init+0x138>)
 8000f50:	f000 fae2 	bl	8001518 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin STB_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | STB_Pin;
 8000f54:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000f58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4817      	ldr	r0, [pc, #92]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000f6e:	f000 fad3 	bl	8001518 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f84:	2305      	movs	r3, #5
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_GPIO_Init+0x138>)
 8000f90:	f000 fac2 	bl	8001518 <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_Pin DIO_Pin */
	GPIO_InitStruct.Pin = CLK_Pin | DIO_Pin;
 8000f94:	2330      	movs	r3, #48	@ 0x30
 8000f96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000fac:	f000 fab4 	bl	8001518 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2028      	movs	r0, #40	@ 0x28
 8000fb6:	f000 fa78 	bl	80014aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fba:	2028      	movs	r0, #40	@ 0x28
 8000fbc:	f000 fa91 	bl	80014e2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	@ 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fa36 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d115      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	201d      	movs	r0, #29
 8001068:	f000 fa1f 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800106c:	201d      	movs	r0, #29
 800106e:	f000 fa38 	bl	80014e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40000400 	.word	0x40000400
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_UART_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010de:	230c      	movs	r3, #12
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <HAL_UART_MspInit+0x8c>)
 80010fa:	f000 fa0d 	bl	8001518 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004400 	.word	0x40004400
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f000 f8a3 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <TIM3_IRQHandler+0x10>)
 800117a:	f001 f876 	bl	800226a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000028 	.word	0x20000028

08001188 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800118c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001190:	f000 fb60 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011c0:	f7ff ffea 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f001 fe9b 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fcfb 	bl	8000be8 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001200:	08003004 	.word	0x08003004
  ldr r2, =_sbss
 8001204:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001208:	200000dc 	.word	0x200000dc

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f92b 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fece 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f943 	bl	80014fe <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f90b 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	200000d8 	.word	0x200000d8

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000d8 	.word	0x200000d8

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e159      	b.n	80017e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8148 	bne.w	80017e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a2 	beq.w	80017e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b57      	ldr	r3, [pc, #348]	@ (8001800 <HAL_GPIO_Init+0x2e8>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	4a56      	ldr	r2, [pc, #344]	@ (8001800 <HAL_GPIO_Init+0x2e8>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ae:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HAL_GPIO_Init+0x2e8>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ba:	4a52      	ldr	r2, [pc, #328]	@ (8001804 <HAL_GPIO_Init+0x2ec>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a49      	ldr	r2, [pc, #292]	@ (8001808 <HAL_GPIO_Init+0x2f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x202>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a48      	ldr	r2, [pc, #288]	@ (800180c <HAL_GPIO_Init+0x2f4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x1fe>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a47      	ldr	r2, [pc, #284]	@ (8001810 <HAL_GPIO_Init+0x2f8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x1fa>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a46      	ldr	r2, [pc, #280]	@ (8001814 <HAL_GPIO_Init+0x2fc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x1f6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a45      	ldr	r2, [pc, #276]	@ (8001818 <HAL_GPIO_Init+0x300>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x1f2>
 8001706:	2304      	movs	r3, #4
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x204>
 800170a:	2307      	movs	r3, #7
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x204>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x204>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x204>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x204>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	@ (8001804 <HAL_GPIO_Init+0x2ec>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b38      	ldr	r3, [pc, #224]	@ (800181c <HAL_GPIO_Init+0x304>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175e:	4a2f      	ldr	r2, [pc, #188]	@ (800181c <HAL_GPIO_Init+0x304>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_GPIO_Init+0x304>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001788:	4a24      	ldr	r2, [pc, #144]	@ (800181c <HAL_GPIO_Init+0x304>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_GPIO_Init+0x304>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b2:	4a1a      	ldr	r2, [pc, #104]	@ (800181c <HAL_GPIO_Init+0x304>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_GPIO_Init+0x304>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_GPIO_Init+0x304>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f aea2 	bls.w	8001534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40013c00 	.word	0x40013c00

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f806 	bl	8001884 <HAL_GPIO_EXTI_Callback>
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e267      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d075      	beq.n	80019a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b85      	ldr	r3, [pc, #532]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4b82      	ldr	r3, [pc, #520]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b7e      	ldr	r3, [pc, #504]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x108>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e242      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x74>
 8001902:	4b76      	ldr	r3, [pc, #472]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a75      	ldr	r2, [pc, #468]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6c      	ldr	r2, [pc, #432]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001934:	4b69      	ldr	r3, [pc, #420]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a68      	ldr	r2, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b66      	ldr	r3, [pc, #408]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a65      	ldr	r2, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fcc2 	bl	80012dc <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fcbe 	bl	80012dc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e207      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xc0>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fcae 	bl	80012dc <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fcaa 	bl	80012dc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1f3      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b51      	ldr	r3, [pc, #324]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0xe8>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019b2:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c7      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4937      	ldr	r1, [pc, #220]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fc63 	bl	80012dc <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fc5f 	bl	80012dc <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a8      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4925      	ldr	r1, [pc, #148]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc42 	bl	80012dc <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc3e 	bl	80012dc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e187      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d036      	beq.n	8001af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fc22 	bl	80012dc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc1e 	bl	80012dc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e167      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x200>
 8001aba:	e01b      	b.n	8001af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fc0b 	bl	80012dc <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	e00e      	b.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fc07 	bl	80012dc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d907      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e150      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	42470000 	.word	0x42470000
 8001ae4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b88      	ldr	r3, [pc, #544]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ea      	bne.n	8001aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8097 	beq.w	8001c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b7d      	ldr	r3, [pc, #500]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b77      	ldr	r3, [pc, #476]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b74      	ldr	r3, [pc, #464]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a73      	ldr	r2, [pc, #460]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fbc7 	bl	80012dc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fbc3 	bl	80012dc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e10c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2ea>
 8001b78:	4b64      	ldr	r3, [pc, #400]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	4a63      	ldr	r2, [pc, #396]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b84:	e01c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x30c>
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	4a5e      	ldr	r2, [pc, #376]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001ba8:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bac:	4a57      	ldr	r2, [pc, #348]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb4:	4b55      	ldr	r3, [pc, #340]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb8:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 0304 	bic.w	r3, r3, #4
 8001bbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d015      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb88 	bl	80012dc <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fb84 	bl	80012dc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0cb      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0ee      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fb72 	bl	80012dc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fb6e 	bl	80012dc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0b5      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a1 	beq.w	8001d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3a:	4b34      	ldr	r3, [pc, #208]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d05c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d141      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb42 	bl	80012dc <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fb3e 	bl	80012dc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e087      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb17 	bl	80012dc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fb13 	bl	80012dc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e05c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x416>
 8001cd0:	e054      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fb00 	bl	80012dc <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fafc 	bl	80012dc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e045      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x444>
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e038      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x4ec>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d028      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d121      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11a      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0cc      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b68      	ldr	r3, [pc, #416]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d90c      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a58      	ldr	r2, [pc, #352]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d044      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d119      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e067      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4934      	ldr	r1, [pc, #208]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fa2e 	bl	80012dc <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff fa2a 	bl	80012dc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d20c      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490a      	ldr	r1, [pc, #40]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f98e 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	08002fdc 	.word	0x08002fdc
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b094      	sub	sp, #80	@ 0x50
 8001f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f70:	4b79      	ldr	r3, [pc, #484]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d00d      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x40>
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	f200 80e1 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8a:	e0db      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f90:	e0db      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f92:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f96:	e0d8      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fca:	4622      	mov	r2, r4
 8001fcc:	462b      	mov	r3, r5
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	6139      	str	r1, [r7, #16]
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb63 0301 	sbc.w	r3, r3, r1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	4651      	mov	r1, sl
 8002002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002006:	4651      	mov	r1, sl
 8002008:	018a      	lsls	r2, r1, #6
 800200a:	4651      	mov	r1, sl
 800200c:	ebb2 0801 	subs.w	r8, r2, r1
 8002010:	4659      	mov	r1, fp
 8002012:	eb63 0901 	sbc.w	r9, r3, r1
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202a:	4690      	mov	r8, r2
 800202c:	4699      	mov	r9, r3
 800202e:	4623      	mov	r3, r4
 8002030:	eb18 0303 	adds.w	r3, r8, r3
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	462b      	mov	r3, r5
 8002038:	eb49 0303 	adc.w	r3, r9, r3
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204a:	4629      	mov	r1, r5
 800204c:	024b      	lsls	r3, r1, #9
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002054:	4621      	mov	r1, r4
 8002056:	024a      	lsls	r2, r1, #9
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002068:	f7fe f8bc 	bl	80001e4 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002074:	e058      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002076:	4b38      	ldr	r3, [pc, #224]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	2200      	movs	r2, #0
 800207e:	4618      	mov	r0, r3
 8002080:	4611      	mov	r1, r2
 8002082:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
 800208c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002090:	4642      	mov	r2, r8
 8002092:	464b      	mov	r3, r9
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	0159      	lsls	r1, r3, #5
 800209e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a2:	0150      	lsls	r0, r2, #5
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4641      	mov	r1, r8
 80020aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ae:	4649      	mov	r1, r9
 80020b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c8:	ebb2 040a 	subs.w	r4, r2, sl
 80020cc:	eb63 050b 	sbc.w	r5, r3, fp
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	00eb      	lsls	r3, r5, #3
 80020da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020de:	00e2      	lsls	r2, r4, #3
 80020e0:	4614      	mov	r4, r2
 80020e2:	461d      	mov	r5, r3
 80020e4:	4643      	mov	r3, r8
 80020e6:	18e3      	adds	r3, r4, r3
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	464b      	mov	r3, r9
 80020ec:	eb45 0303 	adc.w	r3, r5, r3
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fe:	4629      	mov	r1, r5
 8002100:	028b      	lsls	r3, r1, #10
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002108:	4621      	mov	r1, r4
 800210a:	028a      	lsls	r2, r1, #10
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	61fa      	str	r2, [r7, #28]
 8002118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211c:	f7fe f862 	bl	80001e4 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8002146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800214c:	4618      	mov	r0, r3
 800214e:	3750      	adds	r7, #80	@ 0x50
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	08002fec 	.word	0x08002fec

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08002fec 	.word	0x08002fec

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff1e 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fa16 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01b      	beq.n	80022ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0202 	mvn.w	r2, #2
 800229e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f9a3 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 80022ba:	e005      	b.n	80022c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f995 	bl	80025ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f9a6 	bl	8002614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01b      	beq.n	800231a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0204 	mvn.w	r2, #4
 80022ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f97d 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 8002306:	e005      	b.n	8002314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f96f 	bl	80025ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f980 	bl	8002614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0208 	mvn.w	r2, #8
 8002336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f957 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 8002352:	e005      	b.n	8002360 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f949 	bl	80025ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f95a 	bl	8002614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01b      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0210 	mvn.w	r2, #16
 8002382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2208      	movs	r2, #8
 8002388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f931 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 800239e:	e005      	b.n	80023ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f923 	bl	80025ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f934 	bl	8002614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0201 	mvn.w	r2, #1
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f901 	bl	80025d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fabf 	bl	8002978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00c      	beq.n	800241e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f905 	bl	8002628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0220 	mvn.w	r2, #32
 800243a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fa91 	bl	8002964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_TIM_ConfigClockSource+0x1c>
 8002462:	2302      	movs	r3, #2
 8002464:	e0b4      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x186>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002484:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800248c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249e:	d03e      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xd4>
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024a4:	f200 8087 	bhi.w	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ac:	f000 8086 	beq.w	80025bc <HAL_TIM_ConfigClockSource+0x172>
 80024b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b4:	d87f      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024b6:	2b70      	cmp	r3, #112	@ 0x70
 80024b8:	d01a      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0xa6>
 80024ba:	2b70      	cmp	r3, #112	@ 0x70
 80024bc:	d87b      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024be:	2b60      	cmp	r3, #96	@ 0x60
 80024c0:	d050      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0x11a>
 80024c2:	2b60      	cmp	r3, #96	@ 0x60
 80024c4:	d877      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024c6:	2b50      	cmp	r3, #80	@ 0x50
 80024c8:	d03c      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xfa>
 80024ca:	2b50      	cmp	r3, #80	@ 0x50
 80024cc:	d873      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	d058      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x13a>
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	d86f      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024d6:	2b30      	cmp	r3, #48	@ 0x30
 80024d8:	d064      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0x15a>
 80024da:	2b30      	cmp	r3, #48	@ 0x30
 80024dc:	d86b      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d060      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0x15a>
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d867      	bhi.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d05c      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0x15a>
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d05a      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0x15a>
 80024ee:	e062      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002500:	f000 f9a2 	bl	8002848 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002512:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
      break;
 800251c:	e04f      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800252e:	f000 f98b 	bl	8002848 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002540:	609a      	str	r2, [r3, #8]
      break;
 8002542:	e03c      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002550:	461a      	mov	r2, r3
 8002552:	f000 f8ff 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2150      	movs	r1, #80	@ 0x50
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f958 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 8002562:	e02c      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002570:	461a      	mov	r2, r3
 8002572:	f000 f91e 	bl	80027b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2160      	movs	r1, #96	@ 0x60
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f948 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 8002582:	e01c      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002590:	461a      	mov	r2, r3
 8002592:	f000 f8df 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2140      	movs	r1, #64	@ 0x40
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f938 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80025a2:	e00c      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 f92f 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80025b4:	e003      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ba:	e000      	b.n	80025be <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3a      	ldr	r2, [pc, #232]	@ (8002738 <TIM_Base_SetConfig+0xfc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00f      	beq.n	8002674 <TIM_Base_SetConfig+0x38>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800265a:	d00b      	beq.n	8002674 <TIM_Base_SetConfig+0x38>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a37      	ldr	r2, [pc, #220]	@ (800273c <TIM_Base_SetConfig+0x100>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <TIM_Base_SetConfig+0x38>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a36      	ldr	r2, [pc, #216]	@ (8002740 <TIM_Base_SetConfig+0x104>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <TIM_Base_SetConfig+0x38>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a35      	ldr	r2, [pc, #212]	@ (8002744 <TIM_Base_SetConfig+0x108>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d108      	bne.n	8002686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a2b      	ldr	r2, [pc, #172]	@ (8002738 <TIM_Base_SetConfig+0xfc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01b      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002694:	d017      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a28      	ldr	r2, [pc, #160]	@ (800273c <TIM_Base_SetConfig+0x100>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <TIM_Base_SetConfig+0x104>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00f      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a26      	ldr	r2, [pc, #152]	@ (8002744 <TIM_Base_SetConfig+0x108>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00b      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <TIM_Base_SetConfig+0x10c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a24      	ldr	r2, [pc, #144]	@ (800274c <TIM_Base_SetConfig+0x110>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d003      	beq.n	80026c6 <TIM_Base_SetConfig+0x8a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a23      	ldr	r2, [pc, #140]	@ (8002750 <TIM_Base_SetConfig+0x114>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <TIM_Base_SetConfig+0xfc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d103      	bne.n	800270c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	611a      	str	r2, [r3, #16]
  }
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800
 8002744:	40000c00 	.word	0x40000c00
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800

08002754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800277e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 030a 	bic.w	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 0210 	bic.w	r2, r3, #16
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	031b      	lsls	r3, r3, #12
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	f043 0307 	orr.w	r3, r3, #7
 8002834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	431a      	orrs	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e050      	b.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d013      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a15      	ldr	r2, [pc, #84]	@ (800295c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10c      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800291c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4313      	orrs	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40014000 	.word	0x40014000

08002964 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e042      	b.n	8002a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fb66 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f82b 	bl	8002a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a30:	b0c0      	sub	sp, #256	@ 0x100
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	ea40 0301 	orr.w	r3, r0, r1
 8002a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a84:	f021 010c 	bic.w	r1, r1, #12
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a92:	430b      	orrs	r3, r1
 8002a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa6:	6999      	ldr	r1, [r3, #24]
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	ea40 0301 	orr.w	r3, r0, r1
 8002ab2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <UART_SetConfig+0x2cc>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d005      	beq.n	8002acc <UART_SetConfig+0xa0>
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8002cfc <UART_SetConfig+0x2d0>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d104      	bne.n	8002ad6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002acc:	f7ff fb6a 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ad4:	e003      	b.n	8002ade <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad6:	f7ff fb51 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002ada:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae8:	f040 810c 	bne.w	8002d04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002af6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002afa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002afe:	4622      	mov	r2, r4
 8002b00:	462b      	mov	r3, r5
 8002b02:	1891      	adds	r1, r2, r2
 8002b04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b06:	415b      	adcs	r3, r3
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b0e:	4621      	mov	r1, r4
 8002b10:	eb12 0801 	adds.w	r8, r2, r1
 8002b14:	4629      	mov	r1, r5
 8002b16:	eb43 0901 	adc.w	r9, r3, r1
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2e:	4690      	mov	r8, r2
 8002b30:	4699      	mov	r9, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	eb18 0303 	adds.w	r3, r8, r3
 8002b38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb49 0303 	adc.w	r3, r9, r3
 8002b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	18db      	adds	r3, r3, r3
 8002b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b60:	4613      	mov	r3, r2
 8002b62:	eb42 0303 	adc.w	r3, r2, r3
 8002b66:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b70:	f7fd fb38 	bl	80001e4 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b61      	ldr	r3, [pc, #388]	@ (8002d00 <UART_SetConfig+0x2d4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	011c      	lsls	r4, r3, #4
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	eb12 0a01 	adds.w	sl, r2, r1
 8002baa:	4649      	mov	r1, r9
 8002bac:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc4:	4692      	mov	sl, r2
 8002bc6:	469b      	mov	fp, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	eb1a 0303 	adds.w	r3, sl, r3
 8002bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002be8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	18db      	adds	r3, r3, r3
 8002bf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c06:	f7fd faed 	bl	80001e4 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4b3b      	ldr	r3, [pc, #236]	@ (8002d00 <UART_SetConfig+0x2d4>)
 8002c12:	fba3 2301 	umull	r2, r3, r3, r1
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2264      	movs	r2, #100	@ 0x64
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	1acb      	subs	r3, r1, r3
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c26:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <UART_SetConfig+0x2d4>)
 8002c28:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c34:	441c      	add	r4, r3
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c50:	415b      	adcs	r3, r3
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c58:	4641      	mov	r1, r8
 8002c5a:	1851      	adds	r1, r2, r1
 8002c5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c5e:	4649      	mov	r1, r9
 8002c60:	414b      	adcs	r3, r1
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c70:	4659      	mov	r1, fp
 8002c72:	00cb      	lsls	r3, r1, #3
 8002c74:	4651      	mov	r1, sl
 8002c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	00ca      	lsls	r2, r1, #3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	4642      	mov	r2, r8
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	460a      	mov	r2, r1
 8002c90:	eb42 0303 	adc.w	r3, r2, r3
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ca4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cac:	460b      	mov	r3, r1
 8002cae:	18db      	adds	r3, r3, r3
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	eb42 0303 	adc.w	r3, r2, r3
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cc2:	f7fd fa8f 	bl	80001e4 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	@ 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	@ 0x32
 8002cde:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <UART_SetConfig+0x2d4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 0207 	and.w	r2, r3, #7
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4422      	add	r2, r4
 8002cf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf4:	e106      	b.n	8002f04 <UART_SetConfig+0x4d8>
 8002cf6:	bf00      	nop
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	6239      	str	r1, [r7, #32]
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d26:	4641      	mov	r1, r8
 8002d28:	1854      	adds	r4, r2, r1
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	eb43 0501 	adc.w	r5, r3, r1
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	00eb      	lsls	r3, r5, #3
 8002d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3e:	00e2      	lsls	r2, r4, #3
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	4643      	mov	r3, r8
 8002d46:	18e3      	adds	r3, r4, r3
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	eb45 0303 	adc.w	r3, r5, r3
 8002d52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d72:	4629      	mov	r1, r5
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	008a      	lsls	r2, r1, #2
 8002d80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d84:	f7fd fa2e 	bl	80001e4 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b60      	ldr	r3, [pc, #384]	@ (8002f10 <UART_SetConfig+0x4e4>)
 8002d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	011c      	lsls	r4, r3, #4
 8002d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002da4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002da8:	4642      	mov	r2, r8
 8002daa:	464b      	mov	r3, r9
 8002dac:	1891      	adds	r1, r2, r2
 8002dae:	61b9      	str	r1, [r7, #24]
 8002db0:	415b      	adcs	r3, r3
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db8:	4641      	mov	r1, r8
 8002dba:	1851      	adds	r1, r2, r1
 8002dbc:	6139      	str	r1, [r7, #16]
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	414b      	adcs	r3, r1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	00cb      	lsls	r3, r1, #3
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dda:	4651      	mov	r1, sl
 8002ddc:	00ca      	lsls	r2, r1, #3
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	4642      	mov	r2, r8
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dec:	464b      	mov	r3, r9
 8002dee:	460a      	mov	r2, r1
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e10:	4649      	mov	r1, r9
 8002e12:	008b      	lsls	r3, r1, #2
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	008a      	lsls	r2, r1, #2
 8002e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e22:	f7fd f9df 	bl	80001e4 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <UART_SetConfig+0x4e4>)
 8002e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2264      	movs	r2, #100	@ 0x64
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	1acb      	subs	r3, r1, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	@ 0x32
 8002e40:	4a33      	ldr	r2, [pc, #204]	@ (8002f10 <UART_SetConfig+0x4e4>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e4c:	441c      	add	r4, r3
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e56:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	464b      	mov	r3, r9
 8002e60:	1891      	adds	r1, r2, r2
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	415b      	adcs	r3, r3
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	1851      	adds	r1, r2, r1
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	4649      	mov	r1, r9
 8002e74:	414b      	adcs	r3, r1
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e84:	4659      	mov	r1, fp
 8002e86:	00cb      	lsls	r3, r1, #3
 8002e88:	4651      	mov	r1, sl
 8002e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8e:	4651      	mov	r1, sl
 8002e90:	00ca      	lsls	r2, r1, #3
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	4642      	mov	r2, r8
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	eb42 0303 	adc.w	r3, r2, r3
 8002ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	008b      	lsls	r3, r1, #2
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eca:	4641      	mov	r1, r8
 8002ecc:	008a      	lsls	r2, r1, #2
 8002ece:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ed2:	f7fd f987 	bl	80001e4 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <UART_SetConfig+0x4e4>)
 8002edc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	2164      	movs	r1, #100	@ 0x64
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	3332      	adds	r3, #50	@ 0x32
 8002eee:	4a08      	ldr	r2, [pc, #32]	@ (8002f10 <UART_SetConfig+0x4e4>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4422      	add	r2, r4
 8002f02:	609a      	str	r2, [r3, #8]
}
 8002f04:	bf00      	nop
 8002f06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f10:	51eb851f 	.word	0x51eb851f

08002f14 <memset>:
 8002f14:	4402      	add	r2, r0
 8002f16:	4603      	mov	r3, r0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <memset+0xa>
 8002f1c:	4770      	bx	lr
 8002f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f22:	e7f9      	b.n	8002f18 <memset+0x4>

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4d0d      	ldr	r5, [pc, #52]	@ (8002f5c <__libc_init_array+0x38>)
 8002f28:	4c0d      	ldr	r4, [pc, #52]	@ (8002f60 <__libc_init_array+0x3c>)
 8002f2a:	1b64      	subs	r4, r4, r5
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2600      	movs	r6, #0
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	4d0b      	ldr	r5, [pc, #44]	@ (8002f64 <__libc_init_array+0x40>)
 8002f36:	4c0c      	ldr	r4, [pc, #48]	@ (8002f68 <__libc_init_array+0x44>)
 8002f38:	f000 f818 	bl	8002f6c <_init>
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	2600      	movs	r6, #0
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002ffc 	.word	0x08002ffc
 8002f60:	08002ffc 	.word	0x08002ffc
 8002f64:	08002ffc 	.word	0x08002ffc
 8002f68:	08003000 	.word	0x08003000

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
